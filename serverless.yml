service: arenatime
app: arenatime
 
provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: ap-northeast-2
  iamRoleStatements:
    - 
      Action:
        - "dynamodb:DescribeTable"
        - "dynamodb:Query"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
      Effect: Allow
      Resource:
        ? "Fn::GetAtt"
        : 
          - MatchTable
          - Arn
    - 
      Action:
        - "dynamodb:DescribeTable"
        - "dynamodb:Query"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
      Effect: Allow
      Resource:
        ? "Fn::GetAtt"
        : 
          - VoterTable
          - Arn
    - 
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
        - "s3:GetBucketNotification"
        - "s3:PutBucketNotification"
      Effect: Allow
      Resource:
        ? "Fn::Join"
        : 
          - ""
          - 
            - "arn:aws:s3:::"
            - "priconne-arenatime"
            - /*
 
plugins:
  - serverless-offline
  - serverless-plugin-existing-s3

custom:
  serverless-offline:
    port: 4000
  # Set the table name here so we can use it while testing locally

functions:
  putImage:
    handler: src/lambda/putS3Image.handler
    events:
      - 
        http:
          path: api/put-s3-image
          method: post
  putData:
    handler: src/lambda/putS3Data.handler
    events:
      - 
        http:
          path: api/put-s3-data
          method: post
  getSearch:
    handler: src/lambda/getSearch.handler
    events:
      - 
        http:
          path: api/get-search
          method: get

# you can add CloudFormation resource templates here
resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamo-db.yml)}
  - ${file(resources/s3-bucket.yml)}