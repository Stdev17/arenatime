service: arenatime
app: arenatime
 
provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: ap-northeast-2
  iamRoleStatements: 
    - 
      Action: 
        - "dynamodb:DescribeTable"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Effect: Allow
      Resource: 
        ? "Fn::GetAtt"
        : 
          - MatchTable
          - Arn
    - 
      Action: 
        - "s3:PutObject"
        - "s3:GetObject"
      Effect: Allow
      Resource: 
        ? "Fn::Join"
        : 
          - ""
          - 
            - "arn:aws:s3:::"
            - 
              Ref: 
                - "BUCKET NAME"
            - /*



environment:
  tableName: "match-table"

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

 
plugins:
  - serverless-offline

custom:
  serverless-offline:
    port: 4000
  # Set the table name here so we can use it while testing locally

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello/get
          method: get

# you can add CloudFormation resource templates here
resources: 
  - ${file(resources/api-gateway-errors.yml):Resources}
  - ${file(resources/dynamo-db.yml):Resources}
  - ${file(resources/s3-bucket.yml):Resources}